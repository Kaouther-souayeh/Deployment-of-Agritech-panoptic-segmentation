name: Python application
on:
  push:
    branches: [ "V0.01" ]
  pull_request:
    branches: [ "master" ] 

jobs:
  test:
    runs-on: ubuntu-latest    #the server that github available for the workflow
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.7
        uses: actions/setup-python@v3
        with:
          python-version: "3.7"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip \
          && if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pytest
      - name: Test with pytest
        run: | 
          pytest

  buildToACR:
    runs-on: ubuntu-latest
    needs: test
    defaults:
      run:
        shell: bash
        working-directory: Containerization
    steps:
    - uses: actions/checkout@v2
    - uses: azure/docker-login@v1
      with:
        login-server: doccontainers.azurecr.io
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}
    - run: |
        docker build . -t doccontainers.azurecr.io/myapp:${{ github.sha }}
        docker push doccontainers.azurecr.io/myapp:${{ github.sha }}

  build-deploy-aks:
    runs-on: ubuntu-latest
    needs: test
    env:
      DOCKER_REPOSITORY: kaouthersouayeh # name of Docker Hub ID
      IMAGE_NAME: panoptic_images
      IMAGE_TAG: ${{ github.run_number }} # $GITHUB_RUN_NUMBER
      
      CLUSTER_NAME: Panoptic-segmentation-aks-cluster
      RESOURSE_GROUP: first1
    
    steps:

    - name: Git Checkout
      uses: actions/checkout@v2
  
    - name: Build Docker Image
      run:
        docker build ./Containerization/ --file ./Containerization/Dockerfile --tag $DOCKER_REPOSITORY/$IMAGE_NAME:$GITHUB_RUN_NUMBER --build-arg=token=ZGEzNTQ5Y2QyNjAx --no-cache

  
    - name: Login to Docker Hub
      run: |
        echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u $DOCKER_REPOSITORY --password-stdin
  
    - name: Push Image to Docker Hub
      run:
        docker push $DOCKER_REPOSITORY/$IMAGE_NAME:$GITHUB_RUN_NUMBER
   
    - uses: cschleiden/replace-tokens@v1
      with:
        files: 'AKS2.yaml'
        tokenPrefix: __ # optional, default is #{
        tokenSuffix: __ # optional, default is }#
      env:
        DOCKER_REPOSITORY: ${{ env.DOCKER_REPOSITORY }}
        IMAGE_NAME: ${{ env.IMAGE_NAME }}
        IMAGE_TAG: ${{ env.IMAGE_TAG }}
        
    # Set the target AKS cluster.
    - uses: Azure/aks-set-context@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        cluster-name: ${{ env.CLUSTER_NAME }}
        resource-group: ${{ env.RESOURSE_GROUP }}

    - uses: Azure/k8s-deploy@v1
      with:
        manifests: |
          AKS2.yaml
          
    - name: Run Kube-Bench to check cluster config
      continue-on-error: true
      run: |
        kubectl apply -f https://raw.githubusercontent.com/aquasecurity/kube-bench/main/job-aks.yaml
        sleep 30s
        kubectl logs job.batch/kube-bench
        kubectl delete job.batch/kube-bench      